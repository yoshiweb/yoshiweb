/* * Licensed under the MIT License * * Copyright(c) yoshiweb.NET *  * Permission is hereby granted, free of charge, to any person obtaining a copy * of this software and associated documentation files (the "Software"), to deal * in the Software without restriction, including without limitation the rights * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell * copies of the Software, and to permit persons to whom the Software is * furnished to do so, subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in * all copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN * THE SOFTWARE. *  * The MIT License * http://www.opensource.org/licenses/mit-license.php */package net.yoshiweb.motion {	import flash.display.Sprite;	import flash.geom.Point;	/**	 * 任意の座標で変形させるクラス	 *	 * @description	拡大・縮小／回転を実装	 * 	 * @usage	 *	<code>	 *		import flash.display.Sprite;	 *		import net.yoshiweb.motion.Transitions;	 * 	 *		var sprite:Sprite = new Sprite();	 *		sprite.graphics.beginFill(0xFF0000, 1);	 *		sprite.graphics.drawRect(0, 0, 100, 100);	 *		sprite.graphics.endFill();	 *		this.addChild(sprite);	 *			 *		var trans:Transitions = new Transitions(sprite);	 *		// trans.rotate += 10;	 *		// trans.scaleX += .1;	 *		// trans.scaleY += .1;	 *		// trace([ trans.rotate, trans.scaleX, trans.scaleY ]);	 *		 *		// クリックした座標を基準に変形	 *		trans.setTransPoint(10, 20);	 *		trans.rotate += 10;	 *		trans.scaleX += .5;	 *		trans.scaleY = .5;	 *		// trace([ trans.rotate, trans.scaleX, trans.scaleY ]);	 *	</code>	 * 	 * @author        Takano Yoshihiro	 * @langversion   ActionScript 3.0	 * @playerversion Flash 9	 * 	 */	public class Transitions {		/////////////////////////////////////////////////////////////		private var _sprite:Sprite;		private var _transPoint:Point;				private var _rotate:Number = 0;		private var _scaleX:Number = 100;		private var _scaleY:Number = 100;		/////////////////////////////////////////////////////////////		// コンストラクタ		public function Transitions(sprite:Sprite)		{			_sprite = sprite;			_rotate = sprite.rotation;			_scaleX = sprite.scaleX;			_scaleY = sprite.scaleY;			_transPoint = new Point(0, 0);		}		/**		* 変形点を設定		* @param	x	変形点 x 座標		* @param	y	変形点 y 座標		*/		public function setTransPoint(x:Number, y:Number):void {			_transPoint = new Point(x, y);		}				/**		* 水平スケールを取得		* @return	水平スケール		*/		public function get scaleX():Number {			return _scaleX;		}		/**		* 水平スケールを設定		* @param	s	スケール		* @usage			*	<code>		*	import net.yoshiweb.motion.Transitions;		*			*	//座標 50, 50 を基準に変形		*	var trans:Transitions = new Transitions(sprite);		*	trans.setTransPoint(50, 50);		*	trans.scaleX += .1;		*	</code>		*/		public function set scaleX(s:Number):void {			_scaleX = s;			var beforePoint:Point = _getTransPointToGlobal();			_sprite.scaleX = _scaleX;			var afterPoint:Point = _getTransPointToGlobal();			_revisionXY(beforePoint, afterPoint);		}		/**		* 垂直スケールを取得		* @return	垂直スケール		*/		public function get scaleY():Number {			return _scaleY;		}		/**		* 垂直スケールを設定		* @param	s	スケール		* @usage			*	<code>		*	import net.yoshiweb.motion.Transitions;		*			*	//座標 50, 50 を基準に変形		*	var trans:Transitions = new Transitions(sprite);		*	trans.setTransPoint(50, 50);		*	trans.scaleY += .1;		*	</code>		*/		public function set scaleY(s:Number):void {			_scaleY = s;			var beforePoint:Point = _getTransPointToGlobal();			_sprite.scaleY = _scaleY;			var afterPoint:Point = _getTransPointToGlobal();			_revisionXY(beforePoint, afterPoint);		}		/**		* 回転角度を取得		* @return	回転角度		*/		public function get rotate():Number {			return _rotate;		}		/**		* 回転角度を設定		* @param	r	回転角度		* @usage			*	<code>		*	import net.yoshiweb.motion.Transitions;		*			*	//座標 50, 50 を基準に変形		*	var trans:Transitions = new Transitions(sprite);		*	trans.setTransPoint(50, 50);		*	trans.rotate += 10;		*	</code>		*/		public function set rotate(r:Number):void {			_rotate = r;			// 変形前の座標取得			// 変形			// 変形後の座標取得			// 座標補正			var beforePoint:Point = _getTransPointToGlobal();			_sprite.rotation = _rotate;			var afterPoint:Point = _getTransPointToGlobal();			_revisionXY(beforePoint, afterPoint);		}										/**		* グローバル座標基準の変形点の座標を取得		* @return	グローバル基準の変形点の座標		*/		private function _getTransPointToGlobal():Point {			var x:Number = _transPoint.x;			var y:Number = _transPoint.y;			//trace(_transPoint);			var point:Point = new Point(x, y);			point = _sprite.localToGlobal(point);			//trace(point);			return point;		}		/**		* 座標補正		* @param	beforePoint	変形前座標		* @param	afterPoint	変形後座標		*/		private function _revisionXY(beforePoint:Point, afterPoint:Point):void {			// 変形前座標 - 変形後座標			var distancePoint:Point = beforePoint.subtract(afterPoint);			//trace(distancePoint);						// 移動			_sprite.x += distancePoint.x;			_sprite.y += distancePoint.y;		}			}}