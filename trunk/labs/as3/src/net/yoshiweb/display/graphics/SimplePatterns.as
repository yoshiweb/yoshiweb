/* * Licensed under the MIT License * * Copyright(c) 2008 wwwusic.net * Copyright(c) yoshiweb.NET *  * Permission is hereby granted, free of charge, to any person obtaining a copy * of this software and associated documentation files (the "Software"), to deal * in the Software without restriction, including without limitation the rights * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell * copies of the Software, and to permit persons to whom the Software is * furnished to do so, subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in * all copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN * THE SOFTWARE. *  * The MIT License * http://www.opensource.org/licenses/mit-license.php */package net.yoshiweb.display.graphics {	import net.yoshiweb.display.graphics.Pattern;	import flash.display.Sprite;	/**	 * SimplePatterns	 *	 * @description	wwwusic.net（スリーダブリュージック）さんで公開されている『シンプルで使える！Photoshop パターン素材 - wwwusic Simple Patterns [ wwwusic.net ] 』を Flashで使えるように再現しました。	 * @see          http://wwwusic.net/design/2007/12/wwwusic_simple_patterns.php	 *	 * @usage	 *	<code>	 *		 *	import net.yoshiweb.display.graphics.SimplePatterns;	 *	import flash.display.Sprite;	 *		 *	var sprite:Sprite = new Sprite();	 *	this.addChild( sprite );	 *		 *	var w:Number = 50;	 *	var h:Number = 50;	 *	var rgb:Number = 0x000000;	 *	var a:Number = 1;	 *		 *	SimplePatterns.slantedLineA     ( sprite, w, h, rgb, a);	 *	//SimplePatterns.slantedLineB   ( sprite, w, h, rgb, a);	 *	//SimplePatterns.solidBar       ( sprite, w, h, rgb, a);	 *	//SimplePatterns.solidHorizonal ( sprite, w, h, rgb, a);	 *	//SimplePatterns.solidBold      ( sprite, w, h, rgb, a);	 *	//SimplePatterns.spot           ( sprite, w, h, rgb, a);	 *	//SimplePatterns.lattice        ( sprite, w, h, rgb, a);	 *	//SimplePatterns.latticeWide    ( sprite, w, h, rgb, a);	 *	//SimplePatterns.lozenge        ( sprite, w, h, rgb, a);	 *	//SimplePatterns.x              ( sprite, w, h, rgb, a);	 *		 *	</code>	 *		 * @author        Takano Yoshihiro	 * @langversion   ActionScript 3.0	 * @playerversion Flash 9	 */	public class SimplePatterns {			//コンストラクタ		public function SimplePatterns() {		}		/////////////////////////////////////////////////////////////////		// public		/////////////////////////////////////////////////////////////////		/**		 * Slanted Line(A)		 * @description	右上から左下への斜線		 */		public static function slantedLineA(target:Sprite, width:Number, height:Number, rgb:uint = 0x000000, alpha:uint = 1) {			// タイル状のパターン２次元配列を作成			var tileArray:Array = new Array();			tileArray[0] = [0, 1, 0];			tileArray[1] = [1, 0, 0];			tileArray[2] = [0, 0, 1];						// 各ピクセルを塗りつぶす色を配列で指定			var argbArray:Array = new Array();			argbArray[0] = 0x00;				// 透過			argbArray[1] = getARGB(rgb, alpha);	// ARGB						Pattern.custom(target, width, height, tileArray, argbArray);		}		/**		 * Slanted Line(B)		 * @description	左上から右下への斜線		 */		public static function slantedLineB(target:Sprite, width:Number, height:Number, rgb:uint = 0x000000, alpha:uint = 1) {			// タイル状のパターン２次元配列を作成			var tileArray:Array = new Array();			tileArray[0] = [1, 0, 0];			tileArray[1] = [0, 1, 0];			tileArray[2] = [0, 0, 1];						// 各ピクセルを塗りつぶす色を配列で指定			var argbArray:Array = new Array();			argbArray[0] = 0x00;				// 透過			argbArray[1] = getARGB(rgb, alpha);	// ARGB						Pattern.custom(target, width, height, tileArray, argbArray);		}		/**		 * Solid Bar		 * @description	縦線		 */		public static function solidBar(target:Sprite, width:Number, height:Number, rgb:uint = 0x000000, alpha:uint = 1) {			// タイル状のパターン２次元配列を作成			var tileArray:Array = new Array();			tileArray[0] = [0, 1];						// 各ピクセルを塗りつぶす色を配列で指定			var argbArray:Array = new Array();			argbArray[0] = 0x00;				// 透過			argbArray[1] = getARGB(rgb, alpha);	// ARGB						Pattern.custom(target, width, height, tileArray, argbArray);		}		/**		 * Solid Horizonal		 * @description	横線		 */		public static function solidHorizonal(target:Sprite, width:Number, height:Number, rgb:uint = 0x000000, alpha:uint = 1) {			// タイル状のパターン２次元配列を作成			var tileArray:Array = new Array();			tileArray[0] = [0];			tileArray[1] = [1];						// 各ピクセルを塗りつぶす色を配列で指定			var argbArray:Array = new Array();			argbArray[0] = 0x00;				// 透過			argbArray[1] = getARGB(rgb, alpha);	// ARGB						Pattern.custom(target, width, height, tileArray, argbArray);		}		/**		 * Solid Bold		 * @description	右上から左下への斜線（太）		 */		public static function solidBold(target:Sprite, width:Number, height:Number, rgb:uint = 0x000000, alpha:uint = 1) {			// タイル状のパターン２次元配列を作成			var tileArray:Array = new Array();			tileArray[0] = [0, 0, 0, 0, 1, 1, 1, 1, 1, 0];			tileArray[1] = [0, 0, 0, 1, 1, 1, 1, 1, 0, 0];			tileArray[2] = [0, 0, 1, 1, 1, 1, 1, 0, 0, 0];			tileArray[3] = [0, 1, 1, 1, 1, 1, 0, 0, 0, 0];			tileArray[4] = [1, 1, 1, 1, 1, 0, 0, 0, 0, 0];			tileArray[5] = [1, 1, 1, 1, 0, 0, 0, 0, 0, 1];			tileArray[6] = [1, 1, 1, 0, 0, 0, 0, 0, 1, 1];			tileArray[7] = [1, 1, 0, 0, 0, 0, 0, 1, 1, 1];			tileArray[8] = [1, 0, 0, 0, 0, 0, 1, 1, 1, 1];			tileArray[9] = [0, 0, 0, 0, 0, 1, 1, 1, 1, 1];						// 各ピクセルを塗りつぶす色を配列で指定			var argbArray:Array = new Array();			argbArray[0] = 0x00;				// 透過			argbArray[1] = getARGB(rgb, alpha);	// ARGB						Pattern.custom(target, width, height, tileArray, argbArray);		}		/**		 * Spot		 * @description	斑点柄		 */		public static function spot(target:Sprite, width:Number, height:Number, rgb:uint = 0x000000, alpha:uint = 1) {			// タイル状のパターン２次元配列を作成			var tileArray:Array = new Array();			tileArray[0] = [0, 0, 0, 0];			tileArray[1] = [0, 1, 0, 0];			tileArray[2] = [0, 0, 0, 0];			tileArray[3] = [0, 0, 0, 1];						// 各ピクセルを塗りつぶす色を配列で指定			var argbArray:Array = new Array();			argbArray[0] = 0x00;				// 透過			argbArray[1] = getARGB(rgb, alpha);	// ARGB						Pattern.custom(target, width, height, tileArray, argbArray);		}		/**		 * Lattice		 * @description	格子柄（狭）		 */		public static function lattice(target:Sprite, width:Number, height:Number, rgb:uint = 0x000000, alpha:uint = 1) {			// タイル状のパターン２次元配列を作成			var tileArray:Array = new Array();			tileArray[0] = [0, 1];			tileArray[1] = [1, 1];						// 各ピクセルを塗りつぶす色を配列で指定			var argbArray:Array = new Array();			argbArray[0] = 0x00;		// 透過			argbArray[1] = getARGB(rgb, alpha);	// ARGB						Pattern.custom(target, width, height, tileArray, argbArray);		}		/**		 * Lattice Wide		 * @description	格子柄（広）		 */		public static function latticeWide(target:Sprite, width:Number, height:Number, rgb:uint = 0x000000, alpha:uint = 1) {			// タイル状のパターン２次元配列を作成			var tileArray:Array = new Array();			tileArray[0] = [0, 0, 0, 0, 1];			tileArray[1] = [0, 0, 0, 0, 1];			tileArray[2] = [0, 0, 0, 0, 1];			tileArray[3] = [0, 0, 0, 0, 1];			tileArray[4] = [1, 1, 1, 1, 1];						// 各ピクセルを塗りつぶす色を配列で指定			var argbArray:Array = new Array();			argbArray[0] = 0x00;				// 透過			argbArray[1] = getARGB(rgb, alpha);	// ARGB						Pattern.custom(target, width, height, tileArray, argbArray);		}		/**		 * Lozenge		 * @description	菱形柄		 */		public static function lozenge(target:Sprite, width:Number, height:Number, rgb:uint = 0x000000, alpha:uint = 1) {			// タイル状のパターン２次元配列を作成			var tileArray:Array = new Array();			tileArray[0] = [0, 0, 1, 0];			tileArray[1] = [0, 1, 0, 1];			tileArray[2] = [1, 0, 0, 0];			tileArray[3] = [0, 1, 0, 1];						// 各ピクセルを塗りつぶす色を配列で指定			var argbArray:Array = new Array();			argbArray[0] = 0x00;				// 透過			argbArray[1] = getARGB(rgb, alpha);	// ARGB						Pattern.custom(target, width, height, tileArray, argbArray);		}		/**		 * X		 * @description	X柄		 */		public static function x(target:Sprite, width:Number, height:Number, rgb:uint = 0x000000, alpha:uint = 1) {			// タイル状のパターン２次元配列を作成			var tileArray:Array = new Array();			tileArray[0] = [1, 0, 0, 0, 0, 0, 0, 0, 0, 1];			tileArray[1] = [0, 1, 0, 0, 0, 0, 0, 0, 1, 0];			tileArray[2] = [0, 0, 1, 0, 0, 0, 0, 1, 0, 0];			tileArray[3] = [0, 0, 0, 1, 0, 0, 1, 0, 0, 0];			tileArray[4] = [0, 0, 0, 0, 1, 1, 0, 0, 0, 0];			tileArray[5] = [0, 0, 0, 0, 1, 1, 0, 0, 0, 0];			tileArray[6] = [0, 0, 0, 1, 0, 0, 1, 0, 0, 0];			tileArray[7] = [0, 0, 1, 0, 0, 0, 0, 1, 0, 0];			tileArray[8] = [0, 1, 0, 0, 0, 0, 0, 0, 1, 0];			tileArray[9] = [1, 0, 0, 0, 0, 0, 0, 0, 0, 1];						// 各ピクセルを塗りつぶす色を配列で指定			var argbArray:Array = new Array();			argbArray[0] = 0x00;				// 透過			argbArray[1] = getARGB(rgb, alpha);	// ARGB						Pattern.custom(target, width, height, tileArray, argbArray);		}		/////////////////////////////////////////////////////////////////		// private		/////////////////////////////////////////////////////////////////		/**		 * ARGB値を求める		 * @usage		 *	<code>		 * 	// 例：0xff0000 の アルファ 50%の ARGB値を求める		 *	var argb:Number = getARGB(0xff0000, 50);		 *	</code>		 */		private static function getARGB (rgb:Number, alpha:Number = 1) {			var a:Number = Math.floor(255*alpha);			var str:String = a.toString(16);			var num:Number = parseInt(str, 16);			return (num * 256 * 256 * 256) + rgb;		}		/////////////////////////////////////////////////////////////////	}}