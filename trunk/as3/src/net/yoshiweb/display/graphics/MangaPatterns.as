/* * Licensed under the MIT License * * Copyright(c) 2008 wwwusic.net * Copyright(c) yoshiweb.NET *  * Permission is hereby granted, free of charge, to any person obtaining a copy * of this software and associated documentation files (the "Software"), to deal * in the Software without restriction, including without limitation the rights * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell * copies of the Software, and to permit persons to whom the Software is * furnished to do so, subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in * all copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN * THE SOFTWARE. *  * The MIT License * http://www.opensource.org/licenses/mit-license.php */package net.yoshiweb.display.graphics {	import net.yoshiweb.display.graphics.Pattern;	import flash.display.Sprite;	/**	 * MangaPatterns	 *	 * @description	wwwusic.net（スリーダブリュージック）さんで公開されている『モノクロ印刷風 Photoshop パターン素材 - wwwusic MANGA ScreenTone [ wwwusic.net ] 』を Flashで使えるように再現しました。	 * @see        	http://wwwusic.net/design/2007/12/wwwusic_manga_screentone.php	 *	 * @usage	 *	<code>	 *		 *	import net.yoshiweb.display.graphics.MangaPatterns;	 *	import flash.display.Sprite;	 *		 *	var sprite:Sprite = new Sprite();	 *	this.addChild( sprite );	 *		 *	var w:Number = 50;	 *	var h:Number = 50;	 *	var rgb:Number = 0x000000;	 *	var a:Number = 1;	 *		 *	MangaPatterns.arare       ( sprite, w, h, rgb, a);	 *	//MangaPatterns.koishi    ( sprite, w, h, rgb, a);	 *	//MangaPatterns.tenugui   ( sprite, w, h, rgb, a);	 *	//MangaPatterns.furoshiki ( sprite, w, h, rgb, a);	 *	//MangaPatterns.kazari    ( sprite, w, h, rgb, a);	 *	//MangaPatterns.shinbun   ( sprite, w, h, rgb, a);	 *	//MangaPatterns.sebiro    ( sprite, w, h, rgb, a);	 *		 *	</code>	 *		 * @author        Takano Yoshihiro	 * @langversion   ActionScript 3.0	 * @playerversion Flash 9	 */	public class MangaPatterns {			//コンストラクタ		public function MangaPatterns() {		}		/////////////////////////////////////////////////////////////////		// public		/////////////////////////////////////////////////////////////////		/**		* ARARE（あられ）		* @description	黒い点と若干灰色掛かった点の集合パターンです。		*/		public static function arare(target:Sprite, width:Number, height:Number, rgb:uint = 0x000000, alpha:uint = 1) {			// タイル状のパターン２次元配列を作成			var tileArray:Array = new Array();			tileArray[0] = [1, 1, 0, 0, 0];			tileArray[1] = [1, 1, 0, 0, 0];			tileArray[2] = [0, 0, 3, 2, 3];			tileArray[3] = [0, 0, 2, 1, 2];			tileArray[4] = [0, 0, 3, 2, 3];			//			// 各ピクセルを塗りつぶす色を配列で指定			var argbArray:Array = new Array();			argbArray[0] = 0x00;						// 透過			argbArray[1] = getARGB(rgb, alpha);			// ARGB			argbArray[2] = getARGB(rgb, alpha * 0.6);	// ARGB			argbArray[3] = getARGB(rgb, alpha * 0.2);	// ARGB			//			Pattern.custom(target, width, height, tileArray, argbArray);		}		/**		* KOISHI（小石）		* @description	大きい黒い点と小さい黒い点の集合パターン		*/		public static function koishi(target:Sprite, width:Number, height:Number, rgb:uint = 0x000000, alpha:uint = 1) {			// タイル状のパターン２次元配列を作成			var tileArray:Array = new Array();			tileArray[0] = [1, 1, 0, 0, 0];			tileArray[1] = [1, 1, 0, 0, 0];			tileArray[2] = [0, 0, 0, 0, 0];			tileArray[3] = [0, 0, 0, 1, 0];			tileArray[4] = [0, 0, 0, 0, 0];			//			// 各ピクセルを塗りつぶす色を配列で指定			var argbArray:Array = new Array();			argbArray[0] = 0x00;						// 透過			argbArray[1] = getARGB(rgb, alpha);			// ARGB			//			Pattern.custom(target, width, height, tileArray, argbArray);		}		/**		* TENUGUI（手拭）		* @description	生地の織りが細かいようなパターン		*/		public static function tenugui(target:Sprite, width:Number, height:Number, rgb:uint = 0x000000, alpha:uint = 1) {			// タイル状のパターン２次元配列を作成			var tileArray:Array = new Array();			tileArray[0] = [1, 2];			tileArray[1] = [2, 1];			//			// 各ピクセルを塗りつぶす色を配列で指定			var argbArray:Array = new Array();			argbArray[0] = 0x00;						// 透過			argbArray[1] = getARGB(rgb, alpha);			// ARGB			argbArray[2] = getARGB(rgb, alpha * 0.2);	// ARGB			//			Pattern.custom(target, width, height, tileArray, argbArray);		}		/**		* FUROSHIKI（風呂敷）		* @description	均等に織られた柄のパターン		*/		public static function furoshiki(target:Sprite, width:Number, height:Number, rgb:uint = 0x000000, alpha:uint = 1) {			// タイル状のパターン２次元配列を作成			var tileArray:Array = new Array();			tileArray[0] = [1, 1, 2, 2];			tileArray[1] = [1, 1, 2, 2];			tileArray[2] = [2, 2, 1, 1];			tileArray[3] = [2, 2, 1, 1];			//			// 各ピクセルを塗りつぶす色を配列で指定			var argbArray:Array = new Array();			argbArray[0] = 0x00;						// 透過			argbArray[1] = getARGB(rgb, alpha);			// ARGB			argbArray[2] = getARGB(rgb, alpha * 0.2);	// ARGB			//			Pattern.custom(target, width, height, tileArray, argbArray);		}		/**		* KAZARI（錺り）		* @description	細かい飾り縫いをしたようなパターン		*/		public static function kazari(target:Sprite, width:Number, height:Number, rgb:uint = 0x000000, alpha:uint = 1) {			// タイル状のパターン２次元配列を作成			var tileArray:Array = new Array();			tileArray[0] = [0, 0, 0, 0, 0];			tileArray[1] = [0, 0, 1, 0, 0];			tileArray[2] = [0, 1, 1, 1, 0];			tileArray[3] = [0, 0, 1, 0, 0];			tileArray[4] = [0, 0, 0, 0, 0];			//			// 各ピクセルを塗りつぶす色を配列で指定			var argbArray:Array = new Array();			argbArray[0] = 0x00;						// 透過			argbArray[1] = getARGB(rgb, alpha);			// ARGB			//			Pattern.custom(target, width, height, tileArray, argbArray);		}		/**		* SHINBUN（新聞）		* @description	写真を白黒印刷したときのようなパターン		*/		public static function shinbun(target:Sprite, width:Number, height:Number, rgb:uint = 0x000000, alpha:uint = 1) {			// タイル状のパターン２次元配列を作成			var tileArray:Array = new Array();			tileArray[0] = [2, 1, 2, 0, 0, 0];			tileArray[1] = [1, 1, 1, 0, 0, 0];			tileArray[2] = [2, 1, 2, 0, 0, 0];			tileArray[3] = [0, 0, 0, 2, 1, 2];			tileArray[4] = [0, 0, 0, 1, 1, 1];			tileArray[5] = [0, 0, 0, 2, 1, 2];			//			// 各ピクセルを塗りつぶす色を配列で指定			var argbArray:Array = new Array();			argbArray[0] = 0x00;						// 透過			argbArray[1] = getARGB(rgb, alpha);			// ARGB			argbArray[2] = getARGB(rgb, alpha * 0.2);	// ARGB			//			Pattern.custom(target, width, height, tileArray, argbArray);		}		/**		* SEBIRO（背広）		* @description	微妙な色合いを演出するパターン		*/		public static function sebiro(target:Sprite, width:Number, height:Number, rgb:uint = 0x000000, alpha:uint = 1) {			// タイル状のパターン２次元配列を作成			var tileArray:Array = new Array();			tileArray[0] = [2, 2, 2, 0, 0, 0];			tileArray[1] = [2, 1, 2, 0, 0, 0];			tileArray[2] = [2, 2, 2, 0, 0, 0];			tileArray[3] = [0, 0, 0, 2, 2, 2];			tileArray[4] = [0, 0, 0, 2, 1, 2];			tileArray[5] = [0, 0, 0, 2, 2, 2];			//			// 各ピクセルを塗りつぶす色を配列で指定			var argbArray:Array = new Array();			argbArray[0] = 0x00;						// 透過			argbArray[1] = getARGB(rgb, alpha * 0.4);	// ARGB			argbArray[2] = getARGB(rgb, alpha * 0.2);	// ARGB			//			Pattern.custom(target, width, height, tileArray, argbArray);		}		/////////////////////////////////////////////////////////////////		// private		/////////////////////////////////////////////////////////////////		/**		* ARGB値を求める		* @usage		*	<code>		* 	// 例：0xff0000 の アルファ 50%の ARGB値を求める		*	var argb:Number = getARGB(0xff0000, 50);		*	</code>		*/		private static function getARGB (rgb:uint = 0x000000, alpha:uint = 1) {			var a:Number = Math.floor(255*alpha);			var str:String = a.toString(16);			var num:Number = parseInt(str, 16);			return (num * 256 * 256 * 256) + rgb;		}		/////////////////////////////////////////////////////////////////	}}