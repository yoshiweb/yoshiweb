/* * Licensed under the MIT License * * Copyright(c) yoshiweb.NET *  * Permission is hereby granted, free of charge, to any person obtaining a copy * of this software and associated documentation files (the "Software"), to deal * in the Software without restriction, including without limitation the rights * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell * copies of the Software, and to permit persons to whom the Software is * furnished to do so, subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in * all copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN * THE SOFTWARE. *  * The MIT License * http://www.opensource.org/licenses/mit-license.php */package net.yoshiweb.display {		import flash.display.BitmapData;	import flash.display.BitmapDataChannel;	import flash.display.Sprite;	import flash.geom.Matrix;	import flash.geom.Point;	import flash.geom.Rectangle;	/**	 * Screenshot	 * 	 * @description		 * 	 * @author        Takano Yoshihiro	 * @langversion   ActionScript 3.0	 * @playerversion Flash 9	 * 	 */	public class Screenshot {		//コンストラクタ		public function Screenshot() {		}		/////////////////////////////////////////////////////////////////		// public		/////////////////////////////////////////////////////////////////		/**		 * Sprite や movieClip を BitmapDataとして取得		 * 		 * @usage	ムービークリップのスクリーンショットをとる		 * 	<code>		 * 	import flash.display.Bitmap;		 * 	import flash.display.BitmapData;		 * 	import net.yoshiweb.display.Screenshot;		 * 		 * 	var bmd:BitmapData = Screenshot.toBitmapData( mc );		 * 	var bm:Bitmap = new bitmap( bmd );		 * 	this.addChild( bm );		 * 	</code>		 */		public static function toBitmapData(target:Sprite):BitmapData		{			var w:Number = target.width;			var h:Number = target.height;			var r:Rectangle = target.getBounds(target.parent);			var matrix:Matrix = new Matrix();			matrix.tx = target.x - r.x;			matrix.ty = target.y - r.y;			var bmd:BitmapData = new BitmapData(w, h, true, 0x00);			bmd.draw(target, matrix);						return bmd;		}				/**		 * オリジナルに他のBitmapDataのアルファチャンネルをコピー		 * @usage		 * 	<code>		 * 	import flash.display.Bitmap;		 * 	import flash.display.BitmapData;		 * 	import net.yoshiweb.display.Screenshot;		 * 		 * 	var baseBmd:BitmapData		 * 	var maskBmd:BitmapData		 * 		 *  var bmd:bitmapData = Screenshot.maskChannel(baseBmd, maskBmd);		 * 	var bm:Bitmap = new bitmap( bmd );		 * 	this.addChild( bm );		 * 	</code>		 * 		 */		public static function maskChannel(original:BitmapData, alphaBitmapData:BitmapData):BitmapData		{			var pnt:Point = new Point(0, 0);			var bmd:BitmapData = new BitmapData(original.width, original.height, true);			bmd.copyPixels(original, original.rect, pnt, alphaBitmapData, pnt, false);			return bmd;//			var pnt:Point = new Point(0, 0);//			var bmd:BitmapData = original.clone();//			bmd.copyChannel(alphaBitmapData, alphaBitmapData.rect, pnt, BitmapDataChannel.ALPHA, BitmapDataChannel.ALPHA);//			return bmd;		}				/////////////////////////////////////////////////////////////////		// private		/////////////////////////////////////////////////////////////////			/////////////////////////////////////////////////////////////////	}}